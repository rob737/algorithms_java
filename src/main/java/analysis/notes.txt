--- Order of growth :

c < loglogN < log N < n^1/3 < n^1/2 < n < n^2 < n^3 < n^4 < 2^n < n^n

You can put values and verify it.

Also, logx (assuming base as 10) means to what value of power of 10 (base) must the result
will become x.
i.e. 10^k = x. (i.e. value of k is basically logx)
e.g. log10 to the base 10 is 1.

Best case, worst case and average case.

--- Asymptotic notations :

Big O : Exact or upper bound.
e.g. O(n) means time taken to execute the task can maximum be some constant times n.
Can be used to represent worst case analysis.

Theta : Exact.
e.g. Theta(n) means time taken would exactly be equal to some constant times n irrespective of the input.

Omega : Exact or Lower.
e.g. Omega(n) means time taken would "atleast" be some constant times n.

Note :: O notation works for multiple input variables as well.
e.g. 100n^2 + 100 m + n : O(n^2 + m)
     100n^2 + 200mn + 30m + 20n : O(n^2 + mn)

Note : When you know of exact bound, always use Theta notation.

Note: Prefer to denote algorithm's complexity by Theta bound as it gives us exact
      order of growth.


---- Asymptotic notation for recursion :

To find asymptotic notation for recursive expression, we follow recursion tree method :

Steps :
1. Make non recursive part of the expression as the root and the recursive part as children.
2. Continue step 1 unless the termination condition is satisfied.

e.g. T(n) = 2 T(n/2) + cn

here, non recursive expression is cn so that becomes root and T(n/2) becomes child and so on.
Above expression will execute for logN times and at each level it takes Cn time so total time
would be Cn*logN i.e. Theta(nlogn).

Geomteric progression sum formula :

Sn = a1 * (1 - r^n) / 1 - r

where r is the common ratio and a1 is the first term of progression.

for n -> Infinity, Sn = a1/(1 - r);

---- Space Complexity :

It is basically order of growth of required memory address in terms of input size.